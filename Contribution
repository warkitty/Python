{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "cell_style": "center"
   },
   "source": [
    "### - What about our null values?\n",
    "In our dataset over the Middle East & Russia, we had a high number of null values. Some areas were nearly empty and others might be missing 1 or 3 values. To use these areas where there is a null value we came up with a strategy for how we can still use the data. We decided to divide the null values into 3 that will make the data the most accurate. We decided to remove most of our outliers if the data value like mean become obscure. However, we kept some of them since it's important to showcase all values in some of the grapes.\n",
    "\n",
    "We chose the following value methods:\n",
    "1. The null values will be based on other country's average and mean if all the other countries are about the        same.\n",
    "2. We will continue to have null as our value. The null will not appear in our graphs if any and if there are        too many null values or that thets a reson for that the value is empty, we decided not to use the data            since it can be misleading. \n",
    "3. The last values will be replaced with a new and updated value from the world bank from the latest updated          year.  \n",
    "    \n",
    "The following code is the calculation process of each features:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Explain your strategy for missing values, as well as your strategy for identifying outliers. \n",
    "(300) â†’ Anne\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "#data sience essentials\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt; plt.rcdefaults()\n",
    "import numpy as np\n",
    "\n",
    "# specifying a file\n",
    "file = r\"C:\\Users\\ryank\\Desktop\\PythonDatabase\\mydataset\\final_project.xlsx\"\n",
    "\n",
    "#read file through pandas\n",
    "clean = pd.read_excel(io = file,\n",
    "                      sheet_name = 'Data',\n",
    "                      header = 0)\n",
    "#Show results of Mirage only\n",
    "mirage_1 = clean.loc[ : , :][clean.loc[: , 'Cool Name'] == 'Mirage']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our dataset does not contain too many missing values. Most of our analysis is based on areas where we had all the data, but we will showcase some examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Original Missing Value Counts overall for the Middle Eas & Russia:\n",
      "------------------------------------------------------------------\n",
      "Country Code Total                                                           0\n",
      "Country Name                                                                 0\n",
      "Hult Region                                                                  0\n",
      "Cool Name                                                                    0\n",
      "AIDS estimated deaths (UNAIDS estimates)                                     3\n",
      "Adjusted net enrollment rate, primary (% of primary school age children)     5\n",
      "Adolescent fertility rate (births per 1,000 women ages 15-19)                0\n",
      "Antiretroviral therapy coverage (% of people living with HIV)                2\n",
      "Births attended by skilled health staff (% of total)                         2\n",
      "CO2 emissions (metric tons per capita)                                       0\n",
      "Contributing family workers, female (% of female employment)                 0\n",
      "Contributing family workers, male (% of male employment)                     0\n",
      "Contributing family workers, total (% of total employment)                   0\n",
      "Employment to population ratio 15+ female (%)                                0\n",
      "Employment to population ratio, 15+, male (%) (modeled ILO estimate)         0\n",
      "Employment to population ratio, 15+, total (%) (modeled ILO estimate)        0\n",
      "Energy use per $1,000 GDP                                                    1\n",
      "Fertility rate, total (births per woman)                                     0\n",
      "GDP per person employed (constant 2011 PPP $)                                0\n",
      "GDP per unit of energy use                                                   1\n",
      "GNI per capita, Atlas method (current US$)                                   0\n",
      "Immunization, measles (% of children ages 12-23 months)                      0\n",
      "Improved sanitation facilities (% of population with access)                 1\n",
      "Improved water source (% of population with access)                          1\n",
      "Incidence of tuberculosis (per 100,000 people)                               0\n",
      "Income share held by lowest 20%                                              6\n",
      "Internet users (per 100 people)                                              0\n",
      "Life expectancy at birth, total (years)                                      0\n",
      "Literacy rate, adult total (% of people ages 15 and above)                  12\n",
      "Maternal mortality ratio (modeled estimate, per 100,000 live births)         0\n",
      "Mobile cellular subscriptions (per 100 people)                               0\n",
      "Mortality rate, infant (per 1,000 live births)                               0\n",
      "Net ODA received per capita (current US$)                                    3\n",
      "Population, total                                                            0\n",
      "Poverty gap at national poverty lines (%)                                   11\n",
      "Pregnant women receiving prenatal care (%)                                  12\n",
      "% Prevalence of HIV                                                          2\n",
      "% Prevalence of undernourishment                                             0\n",
      "Primary completion rate, total (% of relevant age group)                     2\n",
      "Proportion of seats held by women in national parliaments (%)                1\n",
      "Reported cases of malaria                                                    8\n",
      "School enrollment, primary (% net)                                           5\n",
      "Self-employed, total (% of total employment)                                 0\n",
      "Trade (% of GDP)                                                             0\n",
      "Tuberculosis death rate (per 100,000 people), including HIV                  0\n",
      "dtype: int64\n",
      "\n",
      "\n",
      "Sums of Missing Value \n",
      "------------------------------------------------------------------\n",
      "School enrollment, primary (% net)                              793.357872\n",
      "Self-employed, total (% of total employment)                    541.451003\n",
      "Trade (% of GDP)                                               1182.492812\n",
      "Tuberculosis death rate (per 100,000 people), including HIV     187.930000\n",
      "dtype: float64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(f\"\"\"\n",
    "Original Missing Value Counts overall for the Middle Eas & Russia:\n",
    "------------------------------------------------------------------\n",
    "{mirage_1.isnull().sum(axis = 0)}\n",
    "\n",
    "\n",
    "Sums of Missing Value \n",
    "------------------------------------------------------------------\n",
    "{mirage_1.iloc[ : , -4: ].sum(axis = 0)}\n",
    "\n",
    "\"\"\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color= '#ef476f'> The Null values that will be based on other countrie's average </font>\n",
    "\n",
    "By looking into the data of improved water sources, we have all the data for the other countries besides Turkmenistan. Most of the values are in the same rage and do not have too many outliers, we can therefore use the other countries AVG to estimate Turkmenistan's data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate the average of other countries\n",
    "avg = round(mirage_1['Improved water source (% of population with access)'].mean(),2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Histogram for improved water source (% of population with access) calculate mean value of Middle East & Russia\n",
    "fig, ax = plt.subplots(figsize=(18,5)) #set chart size\n",
    "barlist = plt.bar(mirage_1['Country Name'], mirage_1['Improved water source (% of population with access)'])\n",
    "\n",
    "\n",
    "# this adds a title\n",
    "plt.title(label = \"Improved Water Source in Mirage\")\n",
    "\n",
    "\n",
    "# this adds an x-label\n",
    "plt.xlabel(xlabel = 'Country')\n",
    "\n",
    "\n",
    "# this add a y-label\n",
    "plt.ylabel(ylabel = '% of population with access')\n",
    "\n",
    "#Add a line to show the other countries' average\n",
    "plt.hlines(avg, xmin=0, xmax=13, linestyle='dashed', color='r', label = \"Red\")\n",
    "plt.text(13, avg, '89.58 -average of other countries in Mirage', ha='left', va='center')\n",
    "\n",
    "\n",
    "# these compile and display the plot so that it is formatted as expected\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Turkmenistan Null value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color= '#ef476f'> Keeping the null value </font>\n",
    "\n",
    "In some cases its good to keep the missing value because it would be misleading if the other values are very much different. In this case, after some research, we know that there is an \"HIV epidemic growing in Russia, and the rate of new infections rising by between 10-15% each year. It is estimated that over 250 people become infected with HIV every day.Â It's calculated that almost 20% of the population is HIV positive.\" (https://www.avert.org/)\n",
    "This is something they don't want to showcase and therefore keeping the data as a missing value. This also affects the other countries around them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# histogram for HIV calculate mean value of Middle East & Russia\n",
    "sns.distplot(a     = df_dropped['carat'],\n",
    "             bins  = 'fd',\n",
    "             hist  = True,\n",
    "             kde   = False,\n",
    "             rug   = False,\n",
    "             color = 'black')\n",
    "\n",
    "\n",
    "# this adds a title\n",
    "plt.title(label = \"Antiretroviral therapy coverage (% of people living with HIV)\")\n",
    "\n",
    "\n",
    "# this adds an x-label\n",
    "plt.xlabel(xlabel = 'Country')\n",
    "\n",
    "\n",
    "# this add a y-label\n",
    "plt.ylabel(ylabel = '% of people living with HIV')\n",
    "\n",
    "\n",
    "# these compile and display the plot so that it is formatted as expected\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color= '#ef476f'> Replasment with a new and updated value </font>\n",
    "\n",
    "There is some data that was missing but was possible to replace it with new and more valid data from the World Bank."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Country Code Total                                                           0\n",
      "Country Name                                                                 0\n",
      "Hult Region                                                                  0\n",
      "Cool Name                                                                    0\n",
      "AIDS estimated deaths (UNAIDS estimates)                                     0\n",
      "Adjusted net enrollment rate, primary (% of primary school age children)     0\n",
      "Adolescent fertility rate (births per 1,000 women ages 15-19)                0\n",
      "Antiretroviral therapy coverage (% of people living with HIV)                0\n",
      "Births attended by skilled health staff (% of total)                         0\n",
      "CO2 emissions (metric tons per capita)                                       0\n",
      "Contributing family workers, female (% of female employment)                 0\n",
      "Contributing family workers, male (% of male employment)                     0\n",
      "Contributing family workers, total (% of total employment)                   0\n",
      "Employment to population ratio, 15+, female (%) (modeled ILO estimate)       0\n",
      "Employment to population ratio, 15+, male (%) (modeled ILO estimate)         0\n",
      "Employment to population ratio, 15+, total (%) (modeled ILO estimate)        0\n",
      "Energy use (kg of oil equivalent) per $1,000 GDP (constant 2011 PPP)         0\n",
      "Fertility rate, total (births per woman)                                     0\n",
      "GDP per person employed (constant 2011 PPP $)                                0\n",
      "GDP per unit of energy use (constant 2011 PPP $ per kg of oil equivalent)    0\n",
      "GNI per capita, Atlas method (current US$)                                   0\n",
      "Immunization, measles (% of children ages 12-23 months)                      0\n",
      "Improved sanitation facilities (% of population with access)                 0\n",
      "Improved water source (% of population with access)                          0\n",
      "Incidence of tuberculosis (per 100,000 people)                               0\n",
      "Income share held by lowest 20%                                              0\n",
      "Internet users (per 100 people)                                              0\n",
      "Life expectancy at birth, total (years)                                      0\n",
      "Literacy rate, adult total (% of people ages 15 and above)                   0\n",
      "Maternal mortality ratio (modeled estimate, per 100,000 live births)         0\n",
      "Mobile cellular subscriptions (per 100 people)                               0\n",
      "Mortality rate, infant (per 1,000 live births)                               0\n",
      "Net ODA received per capita (current US$)                                    0\n",
      "Population, total                                                            0\n",
      "Poverty gap at national poverty lines (%)                                    0\n",
      "Pregnant women receiving prenatal care (%)                                   0\n",
      "Prevalence of HIV, total (% of population ages 15-49)                        0\n",
      "Prevalence of undernourishment (% of population)                             0\n",
      "Primary completion rate, total (% of relevant age group)                     0\n",
      "Proportion of seats held by women in national parliaments (%)                0\n",
      "Reported cases of malaria                                                    0\n",
      "School enrollment, primary (% net)                                           0\n",
      "Self-employed, total (% of total employment)                                 0\n",
      "Trade (% of GDP)                                                             0\n",
      "Tuberculosis death rate (per 100,000 people), including HIV                  0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# specifying a file\n",
    "file = 'Final_Project_Dataset_missing _values.xlsx'\n",
    "\n",
    "#read file through pandas\n",
    "missing = pd.read_excel(io = file,\n",
    "                      sheet_name = 'Data',\n",
    "                      header = 0)\n",
    "\n",
    "# the following code makes the new DataFrame independent\n",
    "df_dropped = pd.missing.copy(clean)\n",
    "\n",
    "\n",
    "# using dropna() for df_dropped\n",
    "df_dropped = df_dropped.dropna().round(2)\n",
    "\n",
    "\n",
    "# checking to see if all missing values have been dropped\n",
    "print(df_dropped.isnull().sum())\n",
    "\n",
    "# histogram for HIV calculate mean value of Middle East & Russia\n",
    "sns.distplot(a     = df_dropped['carat'],\n",
    "             bins  = 'fd',\n",
    "             hist  = True,\n",
    "             kde   = False,\n",
    "             rug   = False,\n",
    "             color = 'black')\n",
    "\n",
    "\n",
    "# this adds a title\n",
    "plt.title(label = \"Births attended by skilled health staff\")\n",
    "\n",
    "\n",
    "# this adds an x-label\n",
    "plt.xlabel(xlabel = 'Country')\n",
    "\n",
    "\n",
    "# this add a y-label\n",
    "plt.ylabel(ylabel = '% of total')\n",
    "\n",
    "\n",
    "# these compile and display the plot so that it is formatted as expected\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mirage = final.iloc[ : , [3,13,16,19,36,37]][final.iloc[ : , 3] == 'Mirage']\n",
    "mirage_mean = mirage.mean().round(decimals = 2) #calculate mean value of Middle East & Russia"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
